"""" Even Fibonacci numbers

    Problem 2
    Each new term in the Fibonacci sequence is generated by adding the previous two terms
    By starting with 1 and 2, the first 10 terms will be:

    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

    By considering the terms in the Fibonacci sequence whose values do not exceed four million,
    find the sum of the even-valued terms.
"""

from time import perf_counter
start = perf_counter()


class FibonacciEvenSum:

    def __init__(self, n: int):
        self.fibonacci = [1, 2]
        self.sumEven = 2
        self.limit = n

    def calculate_sum(self) -> int:
        counter = 0
        next_fibonacci = self.fibonacci[counter] + self.fibonacci[counter + 1]
        while next_fibonacci < self.limit:

            next_fibonacci = self.fibonacci[counter] + self.fibonacci[counter + 1]
            self.fibonacci.append(next_fibonacci)
            counter += 1
            if next_fibonacci % 2 == 0 and next_fibonacci < 4000000:
                self.sumEven += next_fibonacci
        return self.sumEven


a = FibonacciEvenSum(4000000)
print(a.calculate_sum())
print(a.fibonacci)

end = perf_counter()

print(f"Runtime of the program is {end - start:.10f}")

# 4613732
# [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 514229, 832040, 1346269, 2178309, 3524578, 5702887]
# Runtime of the program is 0.0000698000