""" Pentagon numbers

    Problem 44
    Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first ten pentagonal numbers are:

        1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

    It can be seen that P_4 + P_7 = 22 + 70 = 92 = P_8. However, their difference, 70 − 22 = 48, is not pentagonal.

    Find the pair of pentagonal numbers, P_j and P_k, for which their sum and difference are pentagonal
    and D = |P_k − P_j| is minimised; what is the value of D?
"""

from time import perf_counter
start = perf_counter()

from itertools import combinations
from operator import sub, add
import math


def pentagon(n: int) -> int:
    return n * (3 * n - 1) // 2


def inv_pentagonal(n: int) -> int:
    return int(1 / 6 * (1 + math.sqrt(1 + 24 * n)))


def pentagon_numbers_sum_sub() -> None:
    pentagonals = set(pentagon(i) for i in range(1, 4000))
    combinations_of_pentagonals = combinations(pentagonals, 2)
    for pentagonal in combinations_of_pentagonals:
        if add(*pentagonal) in pentagonals and abs(sub(*pentagonal)) in pentagonals:
            print(abs(sub(*pentagonal)))
            print(pentagonal, inv_pentagonal(pentagonal[0]), inv_pentagonal(pentagonal[1]))


pentagon_numbers_sum_sub()

end = perf_counter()
print(f"Runtime of the program is {end - start:.10f}")

# 5482660
# (1560090, 7042750) 1020 2167
# Runtime of the program is 0.7541641000

# the function increases the differences between two terms in each new pairs.
try_value = 2000000
ppp = [pentagon(i) for i in range(1, try_value)]
print()
print("To prove the answer is the correct one we need to keep checking all numbers till:")
print(f"number of values: {try_value}.", f"differences last members:{ppp[-1] - ppp[-2]}.")

# To prove the answer is the correct one we need to keep checking all numbers till:
# number of values: 2000000. differences last members:5999995.


