""" Highly divisible triangular number

    Problem 12
    The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number
     would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

    Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
    We can see that 28 is the first triangle number to have over five divisors.

    What is the value of the first triangle number to have over five hundred divisors?
"""

from time import perf_counter
start = perf_counter()


class DivisibleTriangular:

    def __init__(self, n_div):
        self.n_div = n_div
        self.cnt = 0
        self.div_tr = 0

    @staticmethod
    def n_divisors(n: int) -> int:
        sqrt, number_of_divisors = int(n ** 0.5) + 1, 0
        for i in range(1, sqrt):
            if not n % i:
                number_of_divisors += 2
                if i * i == n:
                    number_of_divisors -= 1
        return number_of_divisors

    def get_divisible_triangle_number(self) -> None:
        n = 0
        while self.cnt < self.n_div:
            self.div_tr = (n * (n + 1)) / 2
            if n % 2 == 0:
                cnt = self.n_divisors(n / 2) * self.n_divisors(n + 1)
            else:
                cnt = self.n_divisors(n) * self.n_divisors((n + 1) / 2)
            if cnt >= 500:
                print(self.div_tr)
                break
            n += 1


a = DivisibleTriangular(500)
a.get_divisible_triangle_number()

end = perf_counter()
print(f"Runtime of the program is {end - start:.10f}")

# 76576500.0
# Runtime of the program is 0.0994789000
