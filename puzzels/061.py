""" Cyclical figurate numbers

    Problem 61
    Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal numbers are all figurate (polygonal)
    numbers and are generated by the following formulae:

        Triangle	 	P3,n=n(n+1)/2	 	1, 3, 6, 10, 15, ...
        Square	 	    P4,n=n^2	 	    1, 4, 9, 16, 25, ...
        Pentagonal	 	P5,n=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
        Hexagonal	 	P6,n=n(2n−1)	 	1, 6, 15, 28, 45, ...
        Heptagonal	 	P7,n=n(5n−3)/2	 	1, 7, 18, 34, 55, ...
        Octagonal	 	P8,n=n(3n−2)	 	1, 8, 21, 40, 65, ...

    The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three interesting properties.

        1. The set is cyclic, in that the last two digits of each number is the first two digits of the next
            number (including the last number with the first).
        2. Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and pentagonal (P5,44=2882), is
            represented by a different number in the set.
        3. This is the only set of 4-digit numbers with this property.

    Find the sum of the only ordered set of six cyclic 4-digit numbers for which each polygonal type: triangle,
    square, pentagonal, hexagonal, heptagonal, and octagonal, is represented by a different number in the set.
"""

from time import perf_counter
start = perf_counter()

from itertools import permutations


def is_route(numbers: list, remains: list, figurate: list) -> tuple[list, int] | bool:
    if len(remains) == 0:
        if str(numbers[-1])[2:] == str(numbers[0])[0:2]:
            return numbers, sum(numbers)
        else:
            return False
    else:
        for next_number in figurate[remains[0]]:
            if str(numbers[-1])[2:] == str(next_number)[0:2]:
                return is_route(numbers + [next_number], remains[1:], figurate)


def find_route_in_numbers(figurate: list) -> None:
    candidates = [list(route) for route in list(permutations([1, 2, 3, 4, 5], 5))]
    for route_candidate in candidates:
        if len(route_candidate) == len(set(route_candidate)):
            for triangle_number in figurate[0]:
                if is_route([triangle_number], route_candidate, figurate):
                    print(is_route([triangle_number], route_candidate, figurate))
                    return


def get_figurate_numbers() -> list[list[int]]:
    triangle = [int(x) for x in [i * (i + 1) / 2 for i in range(40, 200)] if 999 < x < 10000]
    square = [int(x) for x in [i ** 2 for i in range(30, 100)] if 999 < x < 10000]
    pentagonal = [int(x) for x in [i * (3 * i - 1) / 2 for i in range(25, 100)] if 999 < x < 10000]
    hexagonal = [int(x) for x in [i * (2 * i - 1) for i in range(20, 80)] if 999 < x < 10000]
    heptagonal = [int(x) for x in [i * (5 * i - 3) / 2 for i in range(20, 70)] if 999 < x < 10000]
    octagonal = [int(x) for x in [i * (3 * i - 2) for i in range(15, 70)] if 999 < x < 10000]
    return [triangle, square, pentagonal, hexagonal, heptagonal, octagonal]


figurate_numbers = get_figurate_numbers()
find_route_in_numbers(figurate_numbers)

end = perf_counter()
print(f"Runtime of the program is {end - start:.10f}")

# ([8256, 5625, 2512, 1281, 8128, 2882], 28684)
# Runtime of the program is 0.0767480000
